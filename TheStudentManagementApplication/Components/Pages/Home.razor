@page "/"
@using System.Security.Claims
@using TheStudentManagementApplication.Models.ViewModel
@using TheStudentManagementApplication.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager navigationManager

@inject AppDbContext appDbContext

<PageTitle>Welcome</PageTitle>

<h1 class="text-center">Student Info Management Application</h1>

<br />


<br />

<h5 class="font-weight-bold text-center">If you are an admin or a user, please log in using your username and password.</h5>


<br />

<EditForm Model="@Model" OnValidSubmit="Authinticate" FormName="LoginForm" class="LoginForm">

    <DataAnnotationsValidator/>

    <img src="https://www.pinclipart.com/picdir/big/553-5532083_businessman-safe-secure-protected-user-lock-person-user.png" class="rounded mx-auto d-block" alt="user" width="100px">
    <br />

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="UserName" class="font-weight-bold">Email : </label>
            <InputText class="form-control" id="UserName" placeholder="Username" @bind-Value="Model.UserName" />
            <ValidationMessage For="()=> Model.UserName"/>
        </div>

        <div class="form-group col-md-6">
            <label for="Password" class="font-weight-bold">Password : </label>
            <InputText class="form-control" id="Password" placeholder="Password" @bind-Value="Model.Password" />
            <ValidationMessage For="()=> Model.Password" />
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger validation-message">@errorMessage</span>
        </div>
    </div>
    <br />
    <div class="text-center">
        <button type="submit" class="btn btn-info  font-weight-bold " id="LoginBtn">Login</button>
    </div>
</EditForm>

@code {

    [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authinticate()
    {
        var userAccount = appDbContext.UserAccountTable.Where(x => x.UserName == Model.UserName).FirstOrDefault();
        if( userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid Username or Password !";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Model.UserName),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/AddStudent");

    }
}

